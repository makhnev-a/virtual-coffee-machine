{"version":3,"sources":["components/Products/products.module.css","components/Title/Title.module.css","assets/img/tea.png","assets/img/coffee.jpg","assets/img/juice.jpg","assets/img/milk-coffee.jpeg","redux/reducers/machine/machine.reducer.ts","components/Products/Product/Product.tsx","components/Products/Products.tsx","components/Title/Title.tsx","redux/reducers/user/user.reducer.ts","components/UserDeposit/UserRow/UserDepositRow.tsx","components/UserDeposit/UserDeposit.tsx","components/MachineDeposit.tsx","components/DepositedAmount.tsx","App.tsx","serviceWorker.ts","redux/reducers/product/product.reducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","SET_AMOUNT","SET_BUY_PRODUCT","initialState","deposite","currency","count","amount","userDepositedAmount","setBuyProductAc","type","Product","name","price","img","dispatch","useDispatch","useSelector","state","machine","clickProductHandler","alert","width","height","src","alt","onClick","Products","products","product","className","styles","map","index","key","Title","text","num","title","RETURN_COINS","calcCoins","sum","obj","ten","Math","floor","i","five","two","one","dep","UserDepositRow","setAmountAc","setMachineAmountAc","disabled","UserDeposit","user","MachineDeposit","DepositedAmount","App","Boolean","window","location","hostname","match","id","Tea","Coffee","MilkCoffee","Juice","rootReducer","combineReducers","actions","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7aab446a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"products\":\"products_products__593Dv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1jlrO\"};","module.exports = __webpack_public_path__ + \"static/media/tea.50b22ba1.png\";","module.exports = __webpack_public_path__ + \"static/media/coffee.279dce27.jpg\";","module.exports = __webpack_public_path__ + \"static/media/juice.aa21bd61.jpg\";","module.exports = __webpack_public_path__ + \"static/media/milk-coffee.a590eb30.jpeg\";","import {\n    ActionsType,\n    InitialStateType,\n    MachineCurrencyType,\n    SetBuyProductType,\n    SetMachineAmountType,\n    SetUserDepositedAmountType\n} from \"./types\";\n\nexport const SET_AMOUNT = 'Machine/MachineReducer/SET_AMOUNT';\nexport const SET_USER_DEPOSITED_AMOUNT = 'Machine/MachineReducer/SET_USER_DEPOSITED_AMOUNT';\nexport const SET_BUY_PRODUCT = 'Machine/MachineReducer/SET_BUY_PRODUCT';\n\nconst initialState: InitialStateType = {\n    deposite: [\n        {currency: 1, count: 100},\n        {currency: 2, count: 100},\n        {currency: 5, count: 100},\n        {currency: 10, count: 100}\n    ],\n    amount: 1800,\n    userDepositedAmount: 0\n};\n\nexport const machineReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_AMOUNT:\n            return {\n                ...state,\n                amount: state.amount + action.currency,\n                deposite: state.deposite.map((dep: MachineCurrencyType) => {\n                    if (dep.currency === action.currency) {\n                        return {...dep, count: dep.count + 1};\n                    }\n\n                    return dep;\n                })\n            };\n        case SET_USER_DEPOSITED_AMOUNT:\n            return {...state, userDepositedAmount: state.userDepositedAmount + action.amount};\n        case SET_BUY_PRODUCT:\n            return {...state, userDepositedAmount: state.userDepositedAmount - action.amount};\n        default:\n            return state;\n    }\n};\n\nexport const setMachineAmountAc = (count: number, currency: number): SetMachineAmountType => ({\n    type: SET_AMOUNT,\n    currency,\n    count\n});\n\nexport const setUserDepositedAmountAc = (amount: number): SetUserDepositedAmountType => ({\n    type: SET_USER_DEPOSITED_AMOUNT,\n    amount\n});\n\nexport const setBuyProductAc = (amount: number): SetBuyProductType => ({\n    type: SET_BUY_PRODUCT,\n    amount\n});","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/store\";\nimport {setBuyProductAc} from \"../../../redux/reducers/machine/machine.reducer\";\n\ntype PropsType = {\n    name: string\n    count: number\n    price: number\n    img: string\n};\n\nexport const Product = ({name, count, price, img}: PropsType) => {\n    const dispatch = useDispatch();\n    const amount = useSelector((state: AppStateType) => state.machine.userDepositedAmount);\n\n    const clickProductHandler = () => {\n        if (amount === 0) {\n            alert('Внесите сумму!');\n        } else if (amount < price) {\n            alert(`Недостаточно средств: ${price - amount}`);\n        } else {\n            dispatch(setBuyProductAc(price));\n            alert(`Спасибо! Вами приобретён ${name}`);\n        }\n    };\n\n    return (\n        <article>\n            <img\n                width={100}\n                height={100}\n                src={img}\n                alt=\"Картинка продукта\"\n                onClick={clickProductHandler}\n            />\n            <br/>\n            <span>{name} ({count})</span>\n            <div>{price} руб.</div>\n            <button onClick={clickProductHandler}>Купить</button>\n        </article>\n    );\n};","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {ProductType} from \"../../redux/reducers/product/types\";\nimport {Product} from \"./Product/Product\";\nimport styles from './products.module.css';\n\nexport const Products = () => {\n    const {products} = useSelector((state: AppStateType) => state.product);\n\n    return (\n        <>\n            <aside className={styles.products}>\n                {products.map((product: ProductType, index: number) =>\n                    <Product\n                        name={product.name}\n                        count={product.count}\n                        price={product.price}\n                        img={product.img}\n                        key={`product${index}`}\n                    />\n                )}\n            </aside>\n        </>\n    );\n};","import React from \"react\";\nimport styles from './Title.module.css';\n\ntype PropsType = {\n    text: string\n    num?: number\n};\n\nexport const Title = ({text, num = 0}: PropsType) => {\n    return (\n        <h3 className={styles.title}>{text}: {num}</h3>\n    );\n};","import {ActionsType, CurrenceType, InitialStateType, ReturnCoinsType, SetAmountType} from \"./types\";\n\nexport const SET_AMOUNT = 'User/UserReducer/SET_AMOUNT';\nexport const RETURN_COINS = 'User/UserReducer/RETURN_COINS';\n\nconst initialState: InitialStateType = {\n    deposite: [\n        {currency: 1, count: 10},\n        {currency: 2, count: 30},\n        {currency: 5, count: 20},\n        {currency: 10, count: 15}\n    ],\n    amount: 320\n};\n\nexport const userReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_AMOUNT:\n            return {\n                ...state,\n                amount: state.amount - action.currency,\n                deposite: state.deposite.map((dep: any) => {\n                    if (dep.currency !== action.currency) {\n                        return dep;\n                    } else {\n                        return {\n                            ...dep, count: dep.count - 1\n                        };\n                    }\n                })\n            };\n        case RETURN_COINS:\n            return {\n                ...state,\n                deposite: calcCoins(action.sum, state.deposite)\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setAmountAc = (currency: number): SetAmountType => ({\n    type: SET_AMOUNT,\n    currency\n});\n\nexport const returnCoins = (sum: number): ReturnCoinsType => ({\n    type: RETURN_COINS,\n    sum\n});\n\nconst calcCoins = (sum: number, deposite: Array<CurrenceType>): Array<CurrenceType> => {\n    const obj: { [key: string]: number } = {\n        '1': 0,\n        '2': 0,\n        '5': 0,\n        '10': 0\n    };\n\n    const ten = Math.floor((sum % 1000) / 10);\n\n    for (let i = 0; i < ten; i++) {\n        sum = sum - 10;\n        obj['10']++;\n    }\n\n    const five = Math.floor((sum % 100) / 5);\n\n    for (let i = 0; i < five; i++) {\n        sum = sum - 5;\n        obj['5']++;\n    }\n\n    const two = Math.floor((sum % 100) / 2);\n\n    for (let i = 0; i < two; i++) {\n        sum = sum - 2;\n        obj['2']++;\n    }\n\n    const one = Math.floor((sum % 100));\n\n    for (let i = 0; i < one; i++) {\n        sum = sum - 1\n        obj['1']++;\n    }\n\n    return deposite.map((dep: CurrenceType) => ({...dep, count: dep.count + obj[dep.currency]}));\n};","import React from \"react\";\nimport {setAmountAc} from \"../../../redux/reducers/user/user.reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {setMachineAmountAc, setUserDepositedAmountAc} from \"../../../redux/reducers/machine/machine.reducer\";\n\ntype PropsType = {\n    currency: number\n    count: number\n    index: string\n};\n\nexport const UserDepositRow = ({currency, count, index}: PropsType) => {\n    const dispatch = useDispatch();\n\n    const clickAmountHandler = () => {\n        if (count <= 0) {\n            return;\n        }\n\n        dispatch(setAmountAc(currency));\n        dispatch(setMachineAmountAc(count, currency));\n        dispatch(setUserDepositedAmountAc(currency));\n    };\n\n    return (\n        <div key={`userDeposite${index}`}>\n            {currency} руб. ({count})\n            <button\n                onClick={clickAmountHandler}\n                disabled={count <= 0}\n            >Внести</button>\n        </div>\n    );\n};","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {CurrenceType} from \"../../redux/reducers/user/types\";\nimport {Title} from \"../Title/Title\";\nimport {UserDepositRow} from \"./UserRow/UserDepositRow\";\nimport {returnCoins} from \"../../redux/reducers/user/user.reducer\";\nimport {setBuyProductAc} from \"../../redux/reducers/machine/machine.reducer\";\n\nexport const UserDeposit = () => {\n    const dispatch = useDispatch();\n    const [deposite, amount, userDepositedAmount] = useSelector((state: AppStateType) => [\n        state.user.deposite,\n        state.user.amount,\n        state.machine.userDepositedAmount\n    ]);\n\n    const onSurrenderHandler = () => {\n        if (userDepositedAmount !== 0) {\n            dispatch(returnCoins(userDepositedAmount));\n            dispatch(setBuyProductAc(userDepositedAmount))\n        }\n    };\n\n    return (\n        <>\n            <Title text={'Ваши деньги'} num={amount}/>\n            {deposite.map((dep: CurrenceType, index: number) =>\n                <UserDepositRow\n                    key={`userDeposit${index}`}\n                    currency={dep.currency}\n                    count={dep.count}\n                    index={`userDeposite${index}`}\n                />\n            )}\n            <br/>\n            <button onClick={onSurrenderHandler}>Сдача</button>\n        </>\n    );\n};","import React from \"react\";\nimport {CurrenceType} from \"../redux/reducers/user/types\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\nimport {Title} from \"./Title/Title\";\n\nexport const MachineDeposit = () => {\n    const {deposite, amount} = useSelector((state: AppStateType) => state.machine);\n\n    return (\n        <>\n            <Title text={'Деньги автомата'} num={amount} />\n            {deposite.map((dep: CurrenceType, index: number) =>\n                <div key={`machineDeposite${index}`}>{dep.currency} руб. ({dep.count})</div>\n            )}\n        </>\n    );\n};","import React from \"react\";\nimport {Title} from \"./Title/Title\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\nexport const DepositedAmount = () => {\n    const {userDepositedAmount} = useSelector((state: AppStateType) => state.machine);\n\n    return (\n        <Title\n            text={'Внесенная сумма'}\n            num={userDepositedAmount}\n        />\n    );\n};","import React from 'react';\nimport './App.css';\nimport {Products} from './components/Products/Products';\nimport {UserDeposit} from \"./components/UserDeposit/UserDeposit\";\nimport {MachineDeposit} from './components/MachineDeposit';\nimport {DepositedAmount} from \"./components/DepositedAmount\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"wrapper\">\n                <Products/>\n                <section className={'userBlock'}>\n                    <UserDeposit/>\n                    <MachineDeposit/>\n                    <DepositedAmount/>\n                </section>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { InitialStateType } from \"./types\";\nimport Tea from './../../../assets/img/tea.png';\nimport Coffee from './../../../assets/img/coffee.jpg';\nimport Juice from './../../../assets/img/juice.jpg';\nimport MilkCoffee from './../../../assets/img/milk-coffee.jpeg';\n\nconst initialState: InitialStateType = {\n    products: [\n        {id: 1, name: 'Tea', price: 13, count: 10, img: Tea},\n        {id: 2, name: 'Coffee', price: 18, count: 20, img: Coffee},\n        {id: 3, name: 'Milk Coffee', price: 21, count: 20, img: MilkCoffee},\n        {id: 4, name: 'Juice', price: 35, count: 15, img: Juice}\n    ]\n};\n\nexport const productReducer = (state: InitialStateType = initialState, actions: any): InitialStateType => {\n    switch (actions.type) {\n        default:\n            return state;\n    }\n};","import {combineReducers, createStore} from \"redux\";\nimport {productReducer} from \"./reducers/product/product.reducer\";\nimport {userReducer} from \"./reducers/user/user.reducer\";\nimport {machineReducer} from \"./reducers/machine/machine.reducer\";\n\nconst rootReducer = combineReducers({\n    product: productReducer,\n    user: userReducer,\n    machine: machineReducer\n});\n\nexport type AppStateType = ReturnType<typeof rootReducer>;\n\nconst store = createStore(rootReducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}